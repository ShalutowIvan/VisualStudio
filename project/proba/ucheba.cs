/*using System;

namespace project{

class proba{
	static void main(){


//циклы
		for (int i = 0; i<10; i ++){
	System.Console.WriteLine(i);
	if (i==8){
	break;}//если i равно 8 цикл прекращается и не идет дальше
	else if (i==7){
	continue;// если i = 7 оператор continue пропускает эту итерацию цикла, то есть 7-ая итерация пропускается
		}}
//массивы
		byte[] nums = new byte[5]; //массив состоящий из 5 элементов
		nums[0] = 250;
		nums[1] = 50;
		nums[2] = 20;
		nums[3] = 100;
		nums[4] = 25;
		System.Console.WriteLine("первый элемент" nums[0]);

string[] words = new string[] {"John", "Bob", "Arni"}//в массиве должны быть значения соответствующие типу данных который мы указали для массива
words[1] = "Josh"; // выборочно изменили второй элемент массива
//вывод через цикл первого массива
for (byte i=0; i<nums.Length; i++) // Length означает цифру длины массива, если массив из 5-ти значений, то длина будет 5
Console.WriteLine(nums[i]);//вместо i будет цифра 0 и тд и она будет перебирать элементы массива
//вывод через цикл второго массива
for (byte i=0; i<words.Length; i++) // Length означает цифру длины массива, если массив из 5-ти значений, то длина будет 5
Console.WriteLine(words[i]);//вместо i будет цифра 0 и тд и она будет перебирать элементы массива

//более сложные массивы
short[] numbers = new short[10];
short summa = 0;
//объект лучше создавать вне цикла, чтобы он не занимал память и не создавал новые объект при каждой итерации цикла
Random nazvanie_objecta = new Random();//Random это класс, после класса пишем название объекта, объект с названием massiv будет класса Random
//new Random() это мы выделяем память под класс Random

for(byte i=0;i<numbers.Length; i++)
{


//то что в квадратных скобках это индекс, вместо него мы пишем переменную из массива i
numbers[i] = Convert.ToInt16(nazvanie_objecta.Next(-15, 15));//конвертируем, так как может не сработать, выводятся цифры от 5 до 15

Console.WriteLine(numbers[i]);

summa +=numbers[i];
Console.WriteLine(summa);
}

//двумерный массив
char[,] symbols = new char[2,3];//3 строки 2 столбца
symbols[0,0] = 'H';
Console.WriteLine(symbols[0,0]);
//new int[,]{ //то что после равно это выделение памяти, но можно и без него
int[,] nums = { //в фигурных скобках мы открываем массив и потом в этом массиве еще 3 массива
{4, 6, 7}
{3, 1, 5}
{5, 3, 6}


}

//цикл foreach для массивов
short[] nums = {4,5,6,22,656}
foreach(short el in nums){
Console.WriteLine(el);
}


short[,] nums2 = {
{4,5,6},
{4,53,46},
{4,65,66},
};
foreach(short el2 in nums2){
Console.WriteLine("Элемент массива " + el2);
}

//динамические массивы. В них можно добавлять элементы, столько сколько захотим
//динамический массив использует больше ресурсов в отличии от обычных массивов, если можно то лучше обычный массив, процессор будет уделять больше времени
//мы будет использовать клас list и нужно подключить библиотеку using System.Collections.Generic;
list<int> numbers = new List<int>(); // numbers это объект на основе класса List
//то что после знака = new это выделение памяти для массива, List это клас <int> это тип данных и после этого () это обозначение класса
{4,2,6};
numbers.Add(40);//добавление элемента в массив
numbers.Add(404);
numbers.Add(3);

numbers.Remove(404); // удаление элемента массива по значению
numbers.Sort(); //сортировка массива по возрастанию
numbers.Reverse();//переворачиваем массив, первые элементы в конец, последние вначало
//есть и другие функции, поиск по значению, очистка, проверка сущестования элемента по его значению и тд

//клас List позволяет работать с большим набором функций, с помощью них можно легко манипулировать массивом

foreach(int el in numbers){
	System.Console.WrtiteLine("Элементы динамического массива " + el);
}//выведутся элменты которые мы указали при создании и те которые мы добавили

				//ФУНКЦИИ И МЕТОДЫ
//функции и методы. функции и методы это одно и то же повторяется. в функцию можно записать повторяющийся код
//вместо копирования куска кода, можно вызвать функцию
//функции - это код который можно вызать и повторить несколько раз, типа как подпрограмма
//static void Main() это функция
//при создании динамических массивов мы также обращались к функциям
//функции пишутся вне каких-либо классов, а методы это те же фукнции которые записаны внутри классов
//каждый файл это определенный клас, в классе мы пишем название файла
//если функция записывается в классе то это метод, если фукнция записывается вне класса то это функция, но по факту это одно и то же

//public это модификатор доступа, означает что доступ к этой функции будут иметь все классы, в том числе и тот клас в котором мы находимся
//static означает что можно обращаться к фукнции через название класса, будет принадлежать всему классу вцелом
//void означает что функция ничего не возвращает
//при ссылке на фукнцию выполняется код внутри нее
//функции с названием которое отличается от Main по умолчанию не запускаются при запуске программы, и запускается только Main(), вызывать функцию нужно в нем

static void Main(){
Print();//вызываем фукнцию Print, 
}


public static void Print(){//в скобках можно указать параметр, тип и название
Console.WriteLine("Hello world!");
}





//Строки
string word = "Hello";//тип данных string состоит из массива символов типа данных char, то есть тип данных string это массив
word +="!!!!";
char[] sym = {'d','d','h','w','t'}//пример массива

Console.WriteLine(word[1]);//мы обращаемся к массиву word и выбираем первый элемент символ то есть букву H
Console.WriteLine(word.Length);//выводится колво символов массива слово это массив из символов
//в массивах со строками есть обрезка элементов
word = String.Concat(word, "!!");//добавление элемента с помощью специальной функции Concat, к строке можно добавить подстроку
//к значению перемнной word добавляем строку в кавычках
Console.WriteLine(word);//обращаемся к классу String есть такой клас


	}
}

}

*/